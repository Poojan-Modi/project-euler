/*
Problem 12: Highly Divisible Triangular Number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:

1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

Task
Write a program to find the first triangle number that has over N divisors.

Complexity
Time: O(nâˆšn) depending on how efficiently divisors are counted
Space: O(1) for tracking the current triangle number and divisor count

Triangluar Numbers:
 - S is the sum of number 1..n
 - d_i is the number of divisors of S
    - It is not necassary for them to be prime.
    - to find all divisors only need to check 1..sqrt(S)
    - if S is a perfect square only add 1
*/

#include <iostream>
#include <cmath>

#define LIMIT 500

int countDivisors(long long num)
{
    int count{0};
    for (long long i = 1; i <= std::sqrt(num); ++i)
    {
        if (num % i == 0)
        {
            if (i * i == num)
                count += 1;
            else
                count += 2;
        }
    }
    return count;
}

int main()
{
    long long triangle{0};
    int n{1};

    while (true)
    {
        triangle += n;
        if (countDivisors(triangle) > LIMIT)
        {
            std::cout << "The first traingle number to have over " << LIMIT << " divisors is " << triangle << "\n";
            break;
        }
        ++n;
    }

    return 0;
}