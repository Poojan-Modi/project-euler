/*
Problem 12: Highly Divisible Triangular Number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:

1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

Task
Write a program to find the first triangle number that has over N divisors.

Complexity
Time: O(nâˆšn) depending on how efficiently divisors are counted
Space: O(1) for tracking the current triangle number and divisor count

Solution: Efficient Divisor Counting
N   ->  Integer
pn  ->  Distinct prime number
an  ->  Exponent

N = p1^a1 * p2^a2 *  p3^a3 * ...

D(N)    ->  Number of divisors of any integer N
D(N) =  (a1+1) * (a2+1) * (a3+1) * ...

Note:

Tn  ->  N-th triangle is

Tn = n * (n + 1) / 2

*/

#include <iostream>

int countDivisors(int n)
{
    return 0;
}

int findTriangle(int limit)
{
    return 0;
}

int main()
{
    const int limit {500};
    int triangle {findTriangle(limit)};

    std::cout << "the first triangle number with over " << limit << " divisors: " << triangle << "\n";
}
